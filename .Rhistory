print("Lund")
}
if(!(T && T && F && F && F && F && F && T && T && T)){
print("Double &&")
}
if(!(T & F & F & F & F & F & F & F & F & T)){
print("Single &")
}
if(!(F && F && F && F && F && F && F && F && F && F)){
print("Double &&")
}
if(!(F & F & F & F & F & F & F & F & F & F)){
print("Single &")
}
if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}
if(!(F & F & F & F & F & F & F & F & F & F)){
print("Above condition is False")
}
library("ggplot2")
library("microbenchmark")
autoplot(microbenchmark({if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}}, {if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}}, times = 10L))
autoplot(microbenchmark(
{if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}},
{if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}},
times = 10L))
yo <- if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}
kho <- if(!(F & F & F & F & F & F & F & F & F & F)){
print("Above condition is False")
}
autoplot(microbenchmark(yo, kho, times = 10L))
autoplot(microbenchmark(
{if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}},
{if(!(F && F && F && F && F && F && F && F && F && F)){
print("Above condition is False")
}},
times = 1L))
single_and <- function(condition){
if(condition){
print("Single Hello")
}
}
double_and <- function(condition){
if(condition){
print("Double Hello")
}
}
library("microbenchmark")
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
double_and <- function(condition){
if(condition){
print("Double Hello")
}
}
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
double_and <- function(condition){
if(condition){
print("Double Hello")
}
}
autoplot(microbenchmark(single_and(!(F & F & F & F & F & F & F & F & F & F)),
double_and(!(F && F && F && F && F && F && F && F && F && F)), times = 10L))
install.packages("shiny")
library("shiny")
library("shiny")
ui <- fluidPage(
"Hello World"
)
server <- function(input, output, session){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
textInput("name", "Enter a name: ", "User"),
textOutput("q")
)
server <- function(input, output, session){
output$q <- renderText({paste("Hello, ", input$name, " welcome to my webpage :D")})
}
shinyApp(ui = ui, server = server)
mtcars
typeof(mtcars)
as.matrix(mtcars)
typeof(as.matrix(mtcars))
eg <- as.matrix(mtcars)
eg
babynames
?filter
filter(mpg = 21.0) %>% mtcars
library("dplyr")
filter(mpg = 21.0) %>% mtcars
filter(mpg == 21.0) %>% mtcars
filter(mtcars$mpg == 21.0) %>% mtcars
mtcars %>% filter(mpg == 21.0)
mtcars %>% filter(mpg == 21.0) %>% filter(carb == 4)
mtcars %>% filter(mpg == 21.0) %>% filter(carb == 4) %>% filter(weight > 2.700)
mtcars %>% filter(mpg == 21.0) %>% filter(carb == 4) %>% filter(wt > 2.700)
library("ggplot2")
library("shiny")
install.packages("roxygen2")
library("roxygen2")
ggplot(data = mtcars, aes(x = mpg, y = cyl))
ggplot(data = mtcars, aes(x = mpg, y = cyl)) + geom_bar()
ggplot(data = mtcars, aes(y = cyl)) + geom_bar()
ggplot(data = mtcars) + geom_bar(aes(y = cyl))
?geom_bar()
g <- ggplot(mpg, aes(class))
g + geom_bar()
mpg
ggplot(mtcars, aes(cyl)) + geom_bar()
ggplot(mtcars, mapping = aes(x = mpg, y = cyl)) + geom_bar()
ggplot(mtcars, mapping = aes(x = mpg, y = cyl)) + geom_bar(stat = "identity")
ggplot(mtcars, mapping = aes(x = mpg, y = cyl)) + geom_bar(stat = "identity", width = 0.5)
months <-rep(c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec"), 2)
chickens <-c(1, 2, 3, 3, 3, 4, 5, 4, 3, 4, 2, 2)
eggs <-c(0, 8, 10, 13, 16, 20, 25, 20, 18, 16, 10, 8)
values <-c(chickens, eggs)
type <-c(rep("chickens", 12), rep("eggs", 12))
mydata <-data.frame(months, values)
mydata
value
values
fuck_me <- as.character("1920-01-01 1950-01-01")
fuck_me
?strsplit()
strsplit(fuck_me, " ")
strsplit(fuck_me, " ")[1]
strsplit(fuck_me, " ")[2]
length(strsplit(fuck_me, " "))
typeof(strsplit(fuck_me, " "))
fuck_me
fuck_me_daddy <- strsplit(fuck_me, " ")
fuck_me_daddy
fuck_me_daddy[1]
fuck_me_daddy[2]
fuck_me_daddy[[1]]
fuck_me_daddy[[2]]
yo <- c("hello,fucker,I'm a bad boy, samjhe, maa ke laude??, hein!!")
yo
strsplit(yo, ",")
strsplit(yo, ",")[2]
strsplit(yo, ",")[1]
strsplit(yo, ",")[1][2]
strsplit(yo, ",")[2]
strsplit(yo, ",")[1]
strsplit(yo, ",")[1][2]
strsplit(yo, ",")[1][[2]]
strsplit(yo, ",")[1,1]
fuck_me_daddy
colnames(fuck_me_daddy)
rownames(fuck_me_daddy) <- "yoYoHoneySingh"
dim(fuck_me_daddy)
fuck_me_daddy
dim(fuck_me_daddy)
unlist(fuck_me_daddy)
fuck_me_daddy <- unlist(fuck_me_daddy)
typeof(fuck_me_daddy)
fuck_me_daddy
fuck_me_daddy[1]
fuck_me_daddy[2]
?unlist
?paste
mtcars
ggplot(mtcars) + geom_bar(aes(x = cyl))
library("ggplot2")
ggplot(mtcars) + geom_bar(aes(x = cyl))
ggplot(mtcars, aes(x = cyl)) + geom_bar()
ggplot(mtcars, aes(y = cyl)) + geom_bar()
ggplot(mtcars, aes(y = cyl)) + geom_bar(stat = "identity")
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram()
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red")
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green")
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 2))
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1))
unique(mtcars$cyl)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 5)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 5)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 10)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 10000)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 10000l)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 10000L)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 1)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 2)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", breaks = seq(4,8, by = 1), binwidth = 2)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(4,8, by = 1), binwidth = 2)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(1,10, by = 1), binwidth = 2)
?geom_histogram
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(1,10, by = 1), binwidth = 2)
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(1,10, by = 1), binwidth = "2")
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(1,10, by = 1), binwidth = "20")
ggplot(mtcars, aes(mtcars$cyl)) + geom_histogram(color = "red", fill = "green", breaks = seq(1,10, by = 2), binwidth = "20")
list(mtcars$cyl, mtcars$mpg)
list(mtcars$cyl, mtcars$mpg)[2]
list(mtcars$cyl, mtcars$mpg)[1]
list(mtcars$cyl, mtcars$mpg)
str(mtcars)
summary(mtcars)
summary(mtcars)$mpg
summary(mtcars)[1]
typeof(summary(mtcars))
summary(mtcars)[1][1]
summary(mtcars)[1][2]
summary(mtcars)[1][3]
summary(mtcars)[3]
mean(mtcars[mtcars$cyl == 6, ]$hp)
mean(mtcars$hp)
?group_by
group_by(mtcars, cyl)
library("dplyr")
group_by(mtcars, cyl)
?summarize
?n()
?t.test
?power.t.test()
?anova.lm
ls()
?coerece
?coerce
y <- c(1,2,3,4)
class(y)
mode(y)
version
library("benchmarkme")
get_ram()
get_cpu()
benchmarkme::get_r_version()
benchmarkme::get_ram()
?benchmarkme::get_ram
benchmarkme::get_ram(memory.size())
memory.size()
?sample
?read.csv
readr
install.packages("readr")
library("readr")
?readr::read_csv()
library()
clear
cat("/104")
cat("/014")
cat("\014")
rm(list = ls())
rm(list = ls())
cat("This is a clean R environment")
cat("Now, we will use the installr package to check and update our R version")
install.packages(c("benchmarkme", "dplyr"))
library(installr)
library("installr")
installr::updateR()
cat("
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package"")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
library("dplyr")
library("readr")
install.packages("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
?c
remove.packages("installr", lib="~/R/win-library/3.6")
remove.packages("ada", lib="~/R/win-library/3.6")
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package"
?c
install.packages("ada")
install.packages("ada")
install.packages("adept")
remove.packages("adept")
install.packages("arpr")
library("arpr")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
install.packages("installr")
library("installr")
updateR()
remove.packages("arpr")
install.packages("arpr")
library("arpr")
remove.packages("arpr")
install.packages("arpr")
remove.packages("arpr")
install.packages("arpr")
install.packages("arpr")
install.packages("arpr")
remove.packages("arpr")
install.packages("arpr")
library("arpr")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
install.packages("benchmarkme")
version
cat("Our R version has now been updated.")
install.packages("add2ggplot2")
install.packages("add2ggplot")
library("add2ggplot")
version
version
installr::updateR()
q()
?cmp_fun
?cmpfun
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("microbenchmark")
n <- 100000
autoplot(microbenchmark(f(n), f_opt(n)))
test <- seq_len(500)
test
?seq_len
seq.int(500, 1500, 2)
length(seq.int(500, 1500, 2))
length(seq.int(502, 1500, 2))
length(test)
?memoise
library("memoise")
?memoise
res <- 1
for(i in seq_len(5)){res <- res * i}
res
fact <- function(n){
res <- 1
if(n == 1)
return (res)
else{
return(fact(n)*fact(n-1))
}
}
fact(5)
fact(3)
fact(1)
fact(2)
fact <- function(n){
if(n == 1 || n == 2) {
return (n)
} else{
return(fact(n)*fact(n-1))
}
}
fact(5)
?Recall
fibR <- function(x) {
if (x == 0) return(0)
if (x == 1) return(1)
Recall(x - 1) + Recall(x - 2)
}
fibR(5)
fibR(15)
fibR(11)
fibR(1)
fibR(2)
fibR(3)
fibR(4)
fibR(5)
yo <- memoise(fibR)
yo(5)
yo(50)
yo(15)
yo(16)
?rnorm
rnorm(10)
rnorm(10, 0, 10)
?sort
?sample
?sample
sample(seq_len(100000), 5)
sort(sample(seq_len(100000), 5))
?sort
?sample.int
sample.int(seq_len(10), n, replace = TRUE)
n
sample.int(seq_len(100000), 10, replace = TRUE)
sample.int(seq_len(100000), 10)
sample(seq_len(100000), 10)
?sort
sort(sample(seq_len(100000), 10), method = "radix")
sort(sample(seq_len(100000), 10))
microbenchmark({sort(sample(seq_len(100000), 10), method = "radix")}, {sort(sample(seq_len(100000), 10))})
microbenchmark({sort(sample(seq_len(100000), 10), method = "radix")}, {sort(sample(seq_len(100000), 10))})
yo <- sample(seq_len(100000), 10)
which(yo = min(yo))
which(yo == min(yo))
yo
which.min(yo)
mtcars$mpg
matrix(c(1:81), 9, 9)
yo <- matrix(c(1:81), 9, 9)
apply(yo, 1, mean)
apply(yo, 2, sum)
?Random
?Random
n
n/2
1/2
as.integer(0.5)
yo''
yo
yo <- sample(seq_len(100000), 5)
yo
?append
yo <- append(yo, NA, after = as.integer(5/2))
yo
is.na(yo)
data(ex_mat, ex_df, package="efficient")
install.packages("efficient")
library("efficient")
data(ex_mat, ex_df, package="efficient")
efficient
install.packages("efficient")
library("efficient")
data(ex_mat, ex_df, package="efficient")
microbenchmark(times=100, unit="ms", ex_mat[1,], ex_df[1,])
data.frame(1:352)
### For Efficient Data Carpentry
**tibble**
**tibble**
**tibble**
**tibble**
### For Efficient Data Carpentry
**tibble**
**tibble**
**tibble**
**tibble**
**tibble**
### For efficient input/output
**rio**
**rio**
**rio**
**rio**
mtcars
typeof(mtcars$cyl)
mtcars_modified <- factor(mtcars$cyl)
mtcars_modified
mtcars_modified <- NULL
data("mtcars")
data("mtcars")
read.csv(file.choose())
rm(list = ls())
dataset <- read.csv(file.choose())
summary(dataset)
colnames(dataset)
mtcars
mtcars[-mtcars$gear, ]
mtcars[-(mtcars$gear), ]
mtcars[-(mtcars$gear) ]
mtcars
mtcars[-2, ]
subset(mtcars, select = -("mpg", "cyl"))
subset(mtcars, select = -c("mpg", "cyl"))
subset(mtcars, select = -c(mpg, cyl))
colnames(dataset)
shiny::runApp('C:/Users/Rahul/Desktop/R Programming/alumni_shiny_app')
cat("_/\_")
cat("_//\_")
cat("_//\\_")
cat("_/\\_")
setwd("C:\\Users\\Rahul\\Desktop\\R Programming\\alumni_shiny_app")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
umm <- which(5 == 1:3, arr.ind = TRUE)
umm
length(umm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
