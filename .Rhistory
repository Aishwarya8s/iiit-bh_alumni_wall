version
library("benchmarkme")
get_ram()
get_cpu()
benchmarkme::get_r_version()
benchmarkme::get_ram()
?benchmarkme::get_ram
benchmarkme::get_ram(memory.size())
memory.size()
?sample
?read.csv
readr
install.packages("readr")
library("readr")
?readr::read_csv()
library()
clear
cat("/104")
cat("/014")
cat("\014")
rm(list = ls())
rm(list = ls())
cat("This is a clean R environment")
cat("Now, we will use the installr package to check and update our R version")
install.packages(c("benchmarkme", "dplyr"))
library(installr)
library("installr")
installr::updateR()
cat("
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package"")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
library("dplyr")
library("readr")
install.packages("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
library("ada")
?c
remove.packages("installr", lib="~/R/win-library/3.6")
remove.packages("ada", lib="~/R/win-library/3.6")
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package"
?c
install.packages("ada")
install.packages("ada")
install.packages("adept")
remove.packages("adept")
install.packages("arpr")
library("arpr")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
install.packages("installr")
library("installr")
updateR()
remove.packages("arpr")
install.packages("arpr")
library("arpr")
remove.packages("arpr")
install.packages("arpr")
remove.packages("arpr")
install.packages("arpr")
install.packages("arpr")
install.packages("arpr")
remove.packages("arpr")
install.packages("arpr")
library("arpr")
cat(
"This warning arises because you are running an outdated version of R. So we will now update it using the \"intallr\" package")
install.packages("benchmarkme")
version
cat("Our R version has now been updated.")
install.packages("add2ggplot2")
install.packages("add2ggplot")
library("add2ggplot")
version
version
installr::updateR()
q()
?cmp_fun
?cmpfun
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("microbenchmark")
n <- 100000
autoplot(microbenchmark(f(n), f_opt(n)))
test <- seq_len(500)
test
?seq_len
seq.int(500, 1500, 2)
length(seq.int(500, 1500, 2))
length(seq.int(502, 1500, 2))
length(test)
?memoise
library("memoise")
?memoise
res <- 1
for(i in seq_len(5)){res <- res * i}
res
fact <- function(n){
res <- 1
if(n == 1)
return (res)
else{
return(fact(n)*fact(n-1))
}
}
fact(5)
fact(3)
fact(1)
fact(2)
fact <- function(n){
if(n == 1 || n == 2) {
return (n)
} else{
return(fact(n)*fact(n-1))
}
}
fact(5)
?Recall
fibR <- function(x) {
if (x == 0) return(0)
if (x == 1) return(1)
Recall(x - 1) + Recall(x - 2)
}
fibR(5)
fibR(15)
fibR(11)
fibR(1)
fibR(2)
fibR(3)
fibR(4)
fibR(5)
yo <- memoise(fibR)
yo(5)
yo(50)
yo(15)
yo(16)
?rnorm
rnorm(10)
rnorm(10, 0, 10)
?sort
?sample
?sample
sample(seq_len(100000), 5)
sort(sample(seq_len(100000), 5))
?sort
?sample.int
sample.int(seq_len(10), n, replace = TRUE)
n
sample.int(seq_len(100000), 10, replace = TRUE)
sample.int(seq_len(100000), 10)
sample(seq_len(100000), 10)
?sort
sort(sample(seq_len(100000), 10), method = "radix")
sort(sample(seq_len(100000), 10))
microbenchmark({sort(sample(seq_len(100000), 10), method = "radix")}, {sort(sample(seq_len(100000), 10))})
microbenchmark({sort(sample(seq_len(100000), 10), method = "radix")}, {sort(sample(seq_len(100000), 10))})
yo <- sample(seq_len(100000), 10)
which(yo = min(yo))
which(yo == min(yo))
yo
which.min(yo)
mtcars$mpg
matrix(c(1:81), 9, 9)
yo <- matrix(c(1:81), 9, 9)
apply(yo, 1, mean)
apply(yo, 2, sum)
?Random
?Random
n
n/2
1/2
as.integer(0.5)
yo''
yo
yo <- sample(seq_len(100000), 5)
yo
?append
yo <- append(yo, NA, after = as.integer(5/2))
yo
is.na(yo)
data(ex_mat, ex_df, package="efficient")
install.packages("efficient")
library("efficient")
data(ex_mat, ex_df, package="efficient")
efficient
install.packages("efficient")
library("efficient")
data(ex_mat, ex_df, package="efficient")
microbenchmark(times=100, unit="ms", ex_mat[1,], ex_df[1,])
data.frame(1:352)
### For Efficient Data Carpentry
**tibble**
**tibble**
**tibble**
**tibble**
### For Efficient Data Carpentry
**tibble**
**tibble**
**tibble**
**tibble**
**tibble**
### For efficient input/output
**rio**
**rio**
**rio**
**rio**
mtcars
typeof(mtcars$cyl)
mtcars_modified <- factor(mtcars$cyl)
mtcars_modified
mtcars_modified <- NULL
data("mtcars")
data("mtcars")
read.csv(file.choose())
rm(list = ls())
dataset <- read.csv(file.choose())
summary(dataset)
colnames(dataset)
mtcars
mtcars[-mtcars$gear, ]
mtcars[-(mtcars$gear), ]
mtcars[-(mtcars$gear) ]
mtcars
mtcars[-2, ]
subset(mtcars, select = -("mpg", "cyl"))
subset(mtcars, select = -c("mpg", "cyl"))
subset(mtcars, select = -c(mpg, cyl))
colnames(dataset)
rm(list = ls())
setwd("C:\\Users\\Rahul\\Desktop\\R Programming\\alumni_shiny_app")
dataset <- read.csv(file.choose())
#Removing duplicate entries
dataset <- unique(dataset)
#Checking the dataset
colnames(dataset)
#Removing all unnecessary columns from our dataset
dataset <- subset(dataset, select = -c(Phone.1))
dataset <- subset(dataset, select = -c(Address, Birthday, Phone.1.type,Phone.2.type,Phone.3.type,Phone.2, Phone.3, Messenger.1.type,Messenger.1,Messenger.2,Messenger.2.type,Messenger.3,Messenger.3.type, Website.3, Relationship, Connected.at, Mutual.Count, Mutual, Mutual.1, Mutual.2, Interests))
dataset <- subset(dataset, select = -c(Organization.WWW.1, Organization.WWW.2, Organization.WWW.3, Organization.WWW.4, Organization.WWW.5, Organization.WWW.6, Organization.WWW.7,Organization.Domain.1,Organization.Domain.2,Organization.Domain.3,Organization.Domain.4,Organization.Domain.5,Organization.Domain.6,Organization.Domain.7))
dataset <- subset(dataset, select = -c(Followers, Organization.LI.ID.1,Organization.LI.ID.2,Organization.LI.ID.3,Organization.LI.ID.4,Organization.LI.ID.5,Organization.LI.ID.6,Organization.LI.ID.7))
prepare_df <- function() {
test_df <- read.csv(".//cleaned_alumni_2.csv")
#Creating 7 different data frames consisting of names and organizations
df1 <- test_df[ , c("Full.name", "Organization.1", "id", "Location")]
colnames(df1) <- c("Full.name", "Organization", "id", "Location")
df2 <- test_df[ , c("Full.name", "Organization.2", "id", "Location")]
colnames(df2) <- c("Full.name", "Organization", "id", "Location")
df3 <- test_df[ , c("Full.name", "Organization.3", "id", "Location")]
colnames(df3) <- c("Full.name", "Organization", "id", "Location")
df4 <- test_df[ , c("Full.name", "Organization.4", "id", "Location")]
colnames(df4) <- c("Full.name", "Organization", "id", "Location")
df5 <- test_df[ , c("Full.name", "Organization.5", "id", "Location")]
colnames(df5) <- c("Full.name", "Organization", "id", "Location")
df6 <- test_df[ , c("Full.name", "Organization.6", "id", "Location")]
colnames(df6) <- c("Full.name", "Organization", "id", "Location")
df7 <- test_df[ , c("Full.name", "Organization.7", "id", "Location")]
colnames(df7) <- c("Full.name", "Organization", "id", "Location")
#Created a final dataframe that consists of all entries with their associated companies.
df_final <- rbind(df1, df2, df3, df4, df5, df6, df7)
#Removing all entries where company was not listed.
no_org_ind <- which(df_final$Organization == "", arr.ind = TRUE)
df_final <- df_final[-no_org_ind, ]
#Removing duplicate entries
df_final <- unique(df_final)
#Identifying IIIT-Bh as an organization
iiit_ind <- which((df_final$Organization == "INTERNATIONAL INSTITUTE OF INFORMATION TECHNOLOGY BHUBANESWAR UNIVERSITY") |
(df_final$Organization == "International Institute of Information Technology, Bhubaneswar") |
(df_final$Organization == "IIIT Bhubaneswar"),
arr.ind = TRUE)
#Removing iiit as organization
df_final <- df_final[ -(iiit_ind), ]
df_final
}
org_df <- function(df_final) {
resultant_org_df <- df_final %>%
group_by(df_final$Organization) %>%
summarise(no_of_emp = n())
resultant_org_df <- resultant_org_df[order(-resultant_org_df$no_of_emp), ]
colnames(resultant_org_df) <- c("Orgs", "Employees")
resultant_org_df
}
loc_df <- function(df_final){
resultant_loc_df <- df_final %>%
group_by(df_final$Location) %>%
summarise(residents = n())
#Removing the "" waali entry
resultant_loc_df <- resultant_loc_df[-1, ]
resultant_loc_df <- resultant_loc_df[order(-resultant_loc_df$residents), ]
colnames(resultant_loc_df) <- c("Location", "Employees")
resultant_loc_df
}
df <- prepare_df()
df
df_org <- org_df(df)
library("dplyr")
df_org <- org_df(df)
df_org
df_org <- df_org[c(1:10), ]
shiny::runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mtcars$mpg
mtcars$cyl
class(mtcars$cyl)
mtcars_test <- mtcars
mtcars_test$cyl <- factor(mtcars_test$cyl)
mtcars_test
mtcars$cyl
mtcars_test$cyl
levels(mtcars_test$cyl)
as.character(mtcars_test$cyl)
as.character(levels(mtcars_test$cyl))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
dataset
dataset <- read.csv(file.choose())
#Removing duplicate entries
dataset <- unique(dataset)
#Checking the dataset
colnames(dataset)
#Removing all unnecessary columns from our dataset
dataset <- subset(dataset, select = -c(Phone.1))
dataset <- subset(dataset, select = -c(Address, Birthday, Phone.1.type,Phone.2.type,Phone.3.type,Phone.2, Phone.3, Messenger.1.type,Messenger.1,Messenger.2,Messenger.2.type,Messenger.3,Messenger.3.type, Website.3, Relationship, Connected.at, Mutual.Count, Mutual, Mutual.1, Mutual.2, Interests))
dataset <- subset(dataset, select = -c(Organization.WWW.1, Organization.WWW.2, Organization.WWW.3, Organization.WWW.4, Organization.WWW.5, Organization.WWW.6, Organization.WWW.7,Organization.Domain.1,Organization.Domain.2,Organization.Domain.3,Organization.Domain.4,Organization.Domain.5,Organization.Domain.6,Organization.Domain.7))
unique(dataset$Industry)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardHeader
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(
dashboardPage(
dashboardHeader(title = "IIIT Bhubaneswar Alumni Wall", titleWidth = 1880),
dashboardSidebar(
width = 250,
sidebarMenu(
menuItem(h4("Search by Organization"), tabName = "search_org", icon = icon("industry")),
menuItem(h4("Search by Name"), tabName = "search_name", icon = icon("users")),
menuItem(h4("Search by Location"), tabName = "search_loc", icon = icon("globe")),
menuItem(h4("Search by Industry"), tabName = "search_ind", icon = icon("rocket")),
menuItem(h4("About"), tabName = "about", icon = icon("clipboard"))
),
tags$br(),
tags$br(),
tags$br(),
tags$br(),
tags$br(),
),
dashboardBody(
tabItems(
tabItem(tabName = "search_org",
fluidRow(box(status = "primary", plotlyOutput("top_org_plot"), height = 400, width = 10),
box(status = "primary", br(), br(), h4(tags$b("Select the range by which you want the top organizations to be shown")), br(), br(), br(), uiOutput("org_range_input"), height = 400, width = 2, background = "black")),
fluidRow(box(status = "primary", div(style = 'overflow-x: scroll', DTOutput('org_emp_table')), width = 8),
box(status = "primary", br(), br(), h4(tags$b("Select the organization for which you want our alumni to be shown")), br(), br(), br(), uiOutput("org_name_input"), height = 300, width = 4, background = "black"))
),
tabItem(tabName = "search_loc",
fluidRow(box(status = "primary", plotlyOutput("top_loc_plot"), height = 400, width = 10),
box(status = "primary", br(), br(), br(), h4(tags$b("Select the range to display the top locations for our Alumni base")), br(), br(), br(), uiOutput("loc_range_input"), height = 400, width = 2, background = "black")),
fluidRow(box(status = "primary", div(style = 'overflow-x: scroll', DTOutput('loc_emp_table')), width = 9),
box(status = "primary", br(), br(), br(), h4(tags$b("Select the organization for which you want our alumni to be shown")), br(), br(), br(), uiOutput("loc_name_input"), height = 300, width = 3, background = "black"))
),
tabItem(tabName = "search_ind",
fluidRow(box(status = "primary", plotlyOutput("top_ind_plot"), height = 400, width = 10),
box(status = "primary", br(), br(), br(), h4(tags$b("Select the range to display the top industries for our Alumni base")), br(), br(), br(), uiOutput("ind_range_input"), height = 400, width = 2, background = "black")),
fluidRow(box(status = "primary", div(style = 'overflow-x: scroll', DTOutput('ind_emp_table')), width = 9),
box(status = "primary", br(), br(), br(), h4(tags$b("Select the industry for which you want our alumni to be shown")), br(), br(), br(), uiOutput("ind_name_input"), height = 300, width = 3, background = "black"))
),
tabItem(tabName = "search_name",
fluidRow(box(status = "primary", br(), br(), br(), h4(tags$b("Select the name for which you require information")), br(), br(), br(), uiOutput("emp_name_input"), height = 300, background = "black", width = 8),
tags$head(tags$style(HTML(".small-box {height: 300px}"))),
valueBoxOutput(outputId = "participants")),
fluidRow(box(status = "primary", div(style = 'overflow-x: scroll', DTOutput('name_emp_table')), width = 12))
),
tabItem(tabName = "about",
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?validColors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
